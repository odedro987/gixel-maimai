package main

var Time float
var Color1 vec3
var Color2 vec3

func circle(p vec2) float {
  return length(p)-0.2
}

func triangle(p, q vec2) float {
    p.x = abs(p.x)
	a := p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 )
    b := p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 )
    k := sign( q.y )
    d := min(dot( a, a ),dot(b, b))
    s := max( k*(p.x*q.y-p.y*q.x),k*(p.y-q.y)  )
	return sqrt(d)*sign(s)
}

func hollowTriangle(p, q vec2, r float) float {
    return abs(triangle(p, q))-r
}

func rotate(p vec2, angle float) vec2 {
  rot := mat2(cos(angle), -sin(angle), sin(angle), cos(angle))
  return rot * p
}

func Fragment(_ vec4, texCoords vec2, _ vec4) vec4 {
    origin, size := imageSrcRegionOnTexture()
    uv := (texCoords - origin) / size * 2 - 1
    uv = uv * 2

    d := circle(uv)

    tri := vec2(0.75, -0.75)
    count := 4.0

    angleOffset := 6.28 / count
    angle := atan2(uv.y, uv.x) / 6.28
    angle = (floor(angle * count + 0.5) / count) * 6.28
    off := vec2(cos(angle), sin(angle))
    evenFlag := mod((angle + angleOffset) / angleOffset, 2) * 2 - 1
    distanceOffset := rotate(vec2(0, sin(Time*2) * 0.4 - 0.35), angle + angleOffset * -evenFlag)
    translateUV := uv - off + distanceOffset
    rotateUV := rotate(translateUV, angle + angleOffset)
    d = min(d, hollowTriangle(rotateUV, tri, 0.15))

    clr := mix(Color1 / 255, Color2 / 255, length(rotateUV))
    // White strip
    clr = mix(clr, vec3(1), smoothstep(0, 0.05, d+0.1))
    // Outside discard
    outside := (1-smoothstep(0, 0.025, d))
    // Black outline
    clr *= (1-smoothstep(0.05, 0, abs(d)))
    return vec4(clr, 1)*outside
}